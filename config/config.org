

#+TITLE: Emacs Personal Config
#+AUTHOR: FL√ÅVIO MUNIZ
#+STARTUP: showeverything

* Table of Contents :toc:
- [[#general-settings][General Settings]]
  - [[#graphical-interface][Graphical Interface]]
  - [[#code][Code]]
  - [[#theme][Theme]]
  - [[#font][Font]]
  - [[#keybindings][KeyBindings]]
- [[#git][Git]]
  - [[#magit][Magit]]
  - [[#git-time-machine][Git Time Machine]]
- [[#languages][Languages]]
  - [[#lsp-mode][Lsp Mode]]
  - [[#ccls][Ccls]]
  - [[#markdown][Markdown]]
  - [[#python-mode][Python Mode]]
  - [[#sml][Sml]]
- [[#packages][Packages]]
  - [[#all-the-icons][All The Icons]]
  - [[#buffer-move][Buffer Move]]
  - [[#centaur-tabs][Centaur Tabs]]
  - [[#company][Company]]
  - [[#dashboard][Dashboard]]
  - [[#diminish][Diminish]]
  - [[#dired][Dired]]
  - [[#emmet][Emmet]]
  - [[#flycheck][Flycheck]]
  - [[#highlight-indent-guides][Highlight Indent Guides]]
  - [[#ivy-counsel][Ivy (Counsel)]]
  - [[#neotree][Neotree]]
  - [[#org-mode][Org Mode]]
  - [[#projectile][Projectile]]
  - [[#repeat-mode][Repeat Mode]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#sudo-edit][Sudo Edit]]
  - [[#web-mode][Web Mode]]
  - [[#which-key][Which-Key]]
- [[#terminals][Terminals]]
  - [[#eshell][Eshell]]
  - [[#vterm-and-vterm-toggle][Vterm and Vterm Toggle]]

* General Settings

** Graphical Interface

*** Disable Startup Message, Tools, Scrool and Menu Bar
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

*** Enable Column/Line Number and Truncated Lines
#+begin_src emacs-lisp
  (column-number-mode 1)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode 1)
#+end_src

*** Full Screen at Startup
#+begin_src emacs-lisp
  (add-hook 'window-setup-hook
            'toggle-frame-maximized t)
#+end_src


** Code

*** Self-Closing Parenthesis
#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

*** Custom Tab Width
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq c-default-stayle "linux")
  (setq c-basic-offset 4)
#+end_src

*** Disable Auto Save and Auto Backup
#+begin_src emacs-lisp
  (setq make-bakcup-files nil)
  (setq auto-save-default nil)
#+end_src

*** Use y/n in Prompts
#+begin_src emacs-lisp
  (setq use-short-answers t)
#+end_src

** Theme
Install and load zenburn theme.
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config
    (load-theme 'zenburn t))
#+end_src

** Font
Set custom font, and makes all comments be in italic.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
             '(font . "Ubuntu Mono-14"))
  (set-face-attribute 'default t
                      :font "Ubuntu Mono-14")

  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
#+end_src

** KeyBindings
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config

    ;; Open eshell
    (general-define-key
     "<f9>" 'eshell)

    (general-define-key
     "<f10>" 'vterm-toggle)

    ;; Undo to ctrl-z
    (general-define-key
     "C-z" 'undo)  

    ;; Creates a prefix caller
    (general-create-definer my-leader-def
      :prefix "C-c"
      :keymaps 'override))

    ;; Dired
    (my-leader-def
      "d" '(:ignore t :wk "dired")
      "d j" '(dired-jump :wk "opens dired in current directory")
      "d n" '(neotree-dir :wk "open current directory in neotree"))

    ;; File find/edit
    (my-leader-def
      "f" '(:ignore t :wk "find/edit") 
      "f f" '(find-file :wk "find file")
      "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "edit emacs config")
      "f r" '(counsel-recentf :wk "find recent files"))

    ;; Others
    (my-leader-def
      "TAB TAB" '(comment-line :wk "comment Line(s)")
      "r" '((lambda () (interactive) (org-babel-load-file (expand-file-name "~/.emacs.d/config.org"))) :wk "reload emacs config"))

    ;; Help
    (my-leader-def
      "h" '(:ignore t :wk "help")
      "h f" '(describe-function :wk "describe function")
      "h v" '(describe-variable :wk "describe variable"))

  ;; Window/buffer
    (my-leader-def
      "w" '(:ignore t :wk "windows")
      "w l" '(buf-move-left :wk "window left")
      "w r" '(buf-move-right :wk "window right")
      "w u" '(buf-move-up :wk "window up")
      "w d" '(buf-move-down :wk "window down"))

    ;; Git-timemachine
    (my-leader-def
      "g" '(:ignore t :wk "git")
      "g j" '(git-timemachine-show-previous-revision :wk "previous commit")
      "g k" '(git-timemachine-show-next-revision :wk "next commit"))

    ;; Toggle
    (my-leader-def
      "t" '(:ignore t :wk "toggle")
      "t l" '(display-line-numbers-mode :wk "line numbers")
      "t n" '(neotree-toggle :wk "neotree file viewer")
      "t t" '(visual-line-mode :wk "truncated lines")
      "t v" '(vterm-toggle :wk "vterm")
      "t g" '(git-timemachine-toggle :wk "git-timemachine"))
#+end_src

* Git

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

** Git Time Machine
#+begin_src emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+end_src

* Languages
Adds support to various programming languages.

** Lsp Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-auto-guess-root nil)
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    :commands lsp)

  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :commands lsp-ui-mode)
#+end_src

** Ccls
Use bear to generate compile_commands.json file.
#+begin_src emacs-lisp
  (use-package ccls
    :ensure t
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
           (lambda () (require 'ccls) (lsp))))
#+end_src

** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map
                ("C-c C-e" . markdown-do)))
#+end_src

** Python Mode
Need To install python-lsp-server and jedi-language-server packages.

#+begin_src emacs-lisp
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    (python-shell-interpreter "/usr/bin/ipython3"))

  (use-package lsp-jedi
    :ensure t)
#+end_src

** Sml
#+begin_src emacs-lisp
  (use-package sml-mode
    :ensure t)
#+end_src

* Packages

** All The Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p)
    :config (unless (member "all-the-icons" (font-family-list))
    (all-the-icons-install-fonts t)))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Buffer Move
#+begin_src emacs-lisp
  (require 'windmove)

  ;;;###autoload
  (defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
  ;;  "Switches between the current buffer, and the buffer above the
  ;;  split, if possible."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'up))
	   (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No window above this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-down ()
  "Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'down))
	   (buf-this-buf (window-buffer (selected-window))))
      (if (or (null other-win) 
              (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
          (error "No window under this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-left ()
  "Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'left))
	   (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No left split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'right))
	   (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No right split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))
#+end_src

** Centaur Tabs
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :ensure t
    :demand
    :init
    (setq centaur-tabs-style "bar")
    (setq centaur-tabs-set-icons t)
    (setq centaur-tabs-set-bar 'under)
    (setq x-underline-at-descent-line t)
    :config
    (centaur-tabs-mode t)
    (defun my-centaur-tabs-buffer-groups ()
      "Group buffers into custom categories."
      (list
       (cond
        ;; Group *vterm*, *eshell*, and *Python* buffers under "Terminals"
        ((or (string-prefix-p "*vterm*" (buffer-name))
             (string-prefix-p "*eshell*" (buffer-name))
             (string-prefix-p "*Python*" (buffer-name)))
         "Terminals")
        (t
         (centaur-tabs-get-group-name (current-buffer))))))
    (setq centaur-tabs-buffer-groups-function 'my-centaur-tabs-buffer-groups)
    (centaur-tabs-group-by-projectile-project)
    :bind
    ("C-<" . centaur-tabs-backward)
    ("C->" . centaur-tabs-forward))

#+end_src

** Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :defer 2
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
    :ensure t
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t 
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-icon-types 'all-the-icons)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src

** Diminish
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src

** Dired
#+begin_src emacs-lisp
  (use-package dired-open
    :ensure t
    :config
    (setq dired-open-extensions '(("gif" . "xviewer")
                                  ("jpg" . "xviewer")
                                  ("png" . "xviewer")
                                  ("mkv" . "mpv")
                                  ("mp4" . "mpv"))))
#+end_src

** Emmet
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode)) ;; enable Emmet's css abbreviation.
#+end_src

** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init (global-flycheck-mode))
#+end_src

** Highlight Indent Guides
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :defer t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-character ?\|)
    (setq highlight-indent-guides-responsive 'top))
  (set-face-background 'highlight-indent-guides-odd-face "darkgray")
#+end_src

** Ivy (Counsel)
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :diminish
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :ensure t
    :diminish
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
      (("C-c C-r" . ivy-resume)
      ("C-x B" . ivy-switch-buffer-other-window))
    :custom
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t)
    :config
      (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :ensure t
    :after ivy
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
      (ivy-virtual-abbreviate 'full
      ivy-rich-switch-buffer-align-virtual-buffer t
      ivy-rich-path-style 'abbrev))
#+end_src

** Neotree
#+begin_src emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (setq neo-smart-open t
          neo-show-hidden-files t
          neo-window-width 55
          neo-window-fixed-size nil
          inhibit-compacting-font-caches t
          projectile-switch-project-action 'neotree-projectile-action
          neo-theme (if (display-graphic-p) 'icons 'arrow)) 
    ;; truncate long file names in neotree
    (add-hook 'neo-after-create-hook
              #'(lambda (_)
                  (with-current-buffer (get-buffer neo-buffer-name)
                    (setq truncate-lines t)
                    (setq word-wrap nil)
                    (make-local-variable 'auto-hscroll-mode)
                    (setq auto-hscroll-mode nil)))))
#+end_src

** Org Mode
*** Enable Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** Enable Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

*** Disable Eletric Indent
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish
    :config (projectile-mode 1))
#+end_src

** Repeat Mode
#+begin_src emacs-lisp
  (use-package repeat
	:ensure t
	:hook (after-init . repeat-mode)
	:config
	(repeat-mode 1)
	:custom
	(repeat-too-dangerous '(kill-this-buffer))
	(repeat-exit-timeout 5))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' ‚Ä¶ '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' ‚Ä¶ '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' ‚Ä¶ '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' ‚Ä¶ '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' ‚Ä¶ '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' ‚Ä¶ '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' ‚Ä¶ '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' ‚Ä¶ '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' ‚Ä¶ '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' ‚Ä¶ '#+END_VERSE'         |

#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

** Sudo Edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :config
      (my-leader-def
        "f s" '(sudo-edit-find-file :wk "sudo find file")
        "f e" '(sudo-edit :wk "sudo edit file")))
#+end_src

** Web Mode
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (setq
     web-mode-markup-indent-offset 2
     web-mode-css-indent-offset 2
     web-mode-code-indent-offset 2
     web-mode-style-padding 2
     web-mode-script-padding 2
     web-mode-enable-auto-closing t
     web-mode-enable-auto-opening t
     web-mode-enable-auto-pairing t
     web-mode-enable-auto-indentation t)
    :mode
    (".html$" "*.php$" "*.tsx"))
#+end_src

** Which-Key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :diminish
    :init  
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit nil
          which-key-separator " ‚Üí " ))
#+end_src

* Terminals

** Eshell
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :ensure t
    :after esh-mode
    :config (eshell-syntax-highlighting-global-mode 1))

  (setq scrool-to-bottom-on-input t
        eshell-history-size 5000
        eshell-buffer-maximun-lines 5000)
#+end_src

** Vterm and Vterm Toggle
Install CMake, libtools and libvterm before if errors occurs.

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :config
    (setq shell-file-name "/bin/bash"
          vterm-max-scrollback 5000))

  (use-package vterm-toggle
    :ensure t
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                       (let ((buffer (get-buffer buffer-or-name)))
                         (with-current-buffer buffer
                           (or (equal major-mode 'vterm-mode)
                               (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                    (display-buffer-reuse-window display-buffer-at-bottom)
                    (reusable-frames . visible)
                    (window-height . 0.3))))
#+end_src
