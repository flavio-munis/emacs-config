#+TITLE: Emacs Personal Config
#+AUTHOR: FLÁVIO MUNIZ
#+STARTUP: showeverything

* Table of Contents :toc:
- [[#general-settings][General Settings]]
  - [[#graphical-interface][Graphical Interface]]
  - [[#code][Code]]
  - [[#theme][Theme]]
  - [[#font][Font]]
  - [[#keybindings][KeyBindings]]
- [[#packages][Packages]]
  - [[#all-the-icons][All The Icons]]
  - [[#buffer-move][Buffer Move]]
  - [[#ivy-counsel][Ivy (Counsel)]]
  - [[#org-mode][Org Mode]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#repeat-mode][Repeat Mode]]
  - [[#sudo-edit][Sudo Edit]]
  - [[#which-key][Which-Key]]
- [[#terminals][Terminals]]
  - [[#eshell][Eshell]]
  - [[#vterm-and-vterm-toggle][Vterm and Vterm Toggle]]

* General Settings

** Graphical Interface

*** Disable Startup Message, Tools, Scrool and Menu Bar
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

*** Enable Column/Line Number and Truncated Lines
#+begin_src emacs-lisp
  (column-number-mode 1)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode 1)
#+end_src

*** Full Screen at Startup
#+begin_src emacs-lisp
  (add-hook 'window-setup-hook
            'toggle-frame-maximized t)
#+end_src

** Code

*** Self-Closing Parenthesis and Ctr-c Ctr-v Mode
#+begin_src emacs-lisp
  (electric-pair-mode 1)
  (cua-mode 1)
#+end_src

*** Custom Tab Width
#+begin_src emacs-lisp
  (setq-default tab-width 4)
#+end_src

*** Disable Auto Save and Auto Backup
#+begin_src emacs-lisp
  (setq make-bakcup-files nil)
  (setq auto-save-default nil)
#+end_src

** Theme
Install and load zenburn theme.
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config
    (load-theme 'zenburn t))
#+end_src

** Font
Set custom font, and makes all comments be in italic.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
             '(font . "Ubuntu Mono-14"))
  (set-face-attribute 'default t
                      :font "Ubuntu Mono-14")

  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
#+end_src

** KeyBindings
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config

    ;; Open eshell
    (general-define-key
     "<f9>" 'eshell)

    ;; Creates a prefix caller
    (general-create-definer my-leader-def
      :prefix "C-c"
      :keymaps 'override)

    ;; File find/edit
    (my-leader-def
      "f" '(:ignore t :wk "find/edit") 
      "f f" '(find-file :wk "find file")
      "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "edit emacs config")
      "f r" '(counsel-recentf :wk "find recent files"))

    ;; Others
    (my-leader-def
      "TAB TAB" '(comment-line :wk "comment Line(s)")
      "r" '((lambda () (interactive) (org-babel-load-file (expand-file-name "~/.emacs.d/config.org"))) :wk "reload emacs config"))

    ;; Help
    (my-leader-def
      "h" '(:ignore t :wk "help")
      "h f" '(describe-function :wk "describe function")
      "h v" '(describe-variable :wk "describe variable")))

    ;; Window/buffer
    (my-leader-def
      "w" '(:ignore t :wk "windows")
      "w l" '(buf-move-left :wk "window left")
      "w r" '(buf-move-right :wk "window right")
      "w u" '(buf-move-up :wk "window up")
      "w d" '(buf-move-down :wk "window down"))

    ;; Vterm
    (my-leader-def
      "v" '(:ignore t :wk "vterm")
      "v v" '(vterm-toggle :wk "toggle vterm")
      "v l" '(display-line-numbers-mode :wk "toggle line numbers")
      "v t" '(visual-line-mode :wk "toggle truncated lines"))
#+end_src

* Packages

** All The Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p)
    :config (unless (member "all-the-icons" (font-family-list))
    (all-the-icons-install-fonts t)))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Buffer Move
#+begin_src emacs-lisp
  (require 'windmove)

  ;;;###autoload
  (defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
  ;;  "Switches between the current buffer, and the buffer above the
  ;;  split, if possible."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'up))
	   (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No window above this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-down ()
  "Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'down))
	   (buf-this-buf (window-buffer (selected-window))))
      (if (or (null other-win) 
              (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
          (error "No window under this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-left ()
  "Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'left))
	   (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No left split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'right))
	   (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No right split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))
#+end_src

** Ivy (Counsel)
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :ensure t
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
      (("C-c C-r" . ivy-resume)
      ("C-x B" . ivy-switch-buffer-other-window))
    :custom
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t)
    :config
      (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :ensure t
    :after ivy
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
      (ivy-virtual-abbreviate 'full
      ivy-rich-switch-buffer-align-virtual-buffer t
      ivy-rich-path-style 'abbrev))
#+end_src

** Org Mode
*** Enable Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** Enable Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

*** Disable Eletric Indent
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Repeat Mode
#+begin_src emacs-lisp
  (use-package repeat
    :ensure t
    :hook (after-init . repeat-mode)
    :custom
    (repeat-too-dangerous '(kill-this-buffer))
    (repeat-exit-timeout 3))
#+end_src

*** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

** Sudo Edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :config
      (my-leader-def
        "f s" '(sudo-edit-find-file :wk "sudo find file")
        "f e" '(sudo-edit :wk "sudo edit file")))
#+end_src

** Which-Key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " → " ))
#+end_src

* Terminals

** Eshell
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :ensure t
    :after esh-mode
    :config (eshell-syntax-highlighting-global-mode 1))

  (setq scrool-to-bottom-on-input t
        eshell-history-size 5000
        eshell-buffer-maximun-lines 5000)
#+end_src

** Vterm and Vterm Toggle
Install CMake, libtools and libvterm before if errors occurs.

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :config
    (setq shell-file-name "/bin/bash"
          vterm-max-scrollback 5000))

  (use-package vterm-toggle
    :ensure t
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                       (let ((buffer (get-buffer buffer-or-name)))
                         (with-current-buffer buffer
                           (or (equal major-mode 'vterm-mode)
                               (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                    (display-buffer-reuse-window display-buffer-at-bottom)
                    (reusable-frames . visible)
                    (window-height . 0.3))))
#+end_src
